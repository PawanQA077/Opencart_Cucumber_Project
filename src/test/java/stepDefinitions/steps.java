package stepDefinitions;

import java.time.Duration;
import java.util.HashMap;
import java.util.List;
import java.util.ResourceBundle;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.Assert;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;

import io.cucumber.java.After;
import io.cucumber.java.Before;
import io.cucumber.java.Scenario;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import pageObject.HomePage;
import pageObject.LoginPage;
import pageObject.MyAccountPage;
import utilities.DataReader;


public class steps {
	
	WebDriver driver;			// Not mentioned as public because driver used in single class.
    HomePage hp;
    LoginPage lp;
    MyAccountPage macc;
    
    Logger logger; 			//for logging
    ResourceBundle rb; 		// for reading properties file
    String br; 				//to store browser name

    List<HashMap<String, String>> datamap; 			//Data Driven test with Excel

    @Before															// Execute method before each scenario & import io.cucumber.java.Before;
    public void setup()    											//Junit hook - executes once before starting
    {
        logger= LogManager.getLogger(this.getClass());		        //for logging
        
        rb=ResourceBundle.getBundle("config");						//Reading config.properties for browser
        
        br=rb.getString("browser");
    }
    
    @After															// Execute method after each scenario & import io.cucumber.java.After;
    public void tearDown(Scenario scenario)							// import io.cucumber.java.Scenario;
    {
    	 System.out.println("Scenario status ======>"+scenario.getStatus());
         if(scenario.isFailed()) {
         	
         	//TakesScreenshot ts=(TakesScreenshot) driver;
         	//byte[] screenshot=ts.getScreenshotAs(OutputType.BYTES);			// insted of saving in file we can save it in byte[] because we attached it
         	//scenario.attach(screenshot, "image/png", scenario.getName());		// to default report which generated by cucumber
         	  
        	byte[] screenshot= ((TakesScreenshot) driver).getScreenshotAs(OutputType.BYTES);	// insted of saving in file we can save it in byte[] because we attached it
          	scenario.attach(screenshot, "image/png", scenario.getName());						// to default report which generated by cucumber
          	            
         }
        driver.quit();
    }
    
    
	@Given("User Launch browser")
	public void user_launch_browser() 
	{
		if(br.equals("chrome"))					// chrome comes from config.properties for browser
        {
           driver=new ChromeDriver();
        }
        else if (br.equals("firefox")) {
            driver = new FirefoxDriver();
        }
        else if (br.equals("edge")) {
            driver = new EdgeDriver();
        }
        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));	 
	}
	
	@Given("opens URL {string}")
	public void opens_url(String url)		// string i.e URL comes from features file
	{
		driver.get(url);
        driver.manage().window().maximize();
	}

	@When("User navigate to MyAccount menu")
	public void user_navigate_to_my_account_menu() 
	{
		hp=new HomePage(driver);
    	hp.clickMyAccount();
        logger.info("===== Clicked on My Account =====");
	}

	@When("click on Login")
	public void click_on_login() 
	{
		 hp.clickLogin();
	     logger.info("===== Clicked on Login =====");
	}

	@When("User enters Email as {string} and Password as {string}")
	public void user_enters_email_as_and_password_as(String email, String pwd) 	// string, string2 i.e email & password comes from features file
	{
		lp=new LoginPage(driver);
        
    	lp.setEmail(email);
        logger.info("===== Provided Email =====");
        lp.setPassword(pwd);
        logger.info("===== Provided Password =====");
	}

	@When("Click on Login button")
	public void click_on_login_button() 
	{
		lp.clickLogin();
        logger.info("===== Clicked on Login button =====");
	}

	@Then("User navigates to MyAccount Page")
	public void user_navigates_to_my_account_page() 
	{
		macc=new MyAccountPage(driver);
		boolean targetpage=macc.isMyAccountPageExists();
		
		if(targetpage)
        {
            logger.info("===== Login Success =====");
            Assert.assertTrue(true);					// import org.junit.Assert;
        }
        else
        {
            logger.error("===== Login Failed =====");
            Assert.assertTrue(false);
        }

	}	
	
	
    		//   **************   Data Driven test method    **************  //
	
	@Then("check User navigates to MyAccount Page by passing Email and Password with excel row {string}")
    public void check_user_navigates_to_my_account_page_by_passing_email_and_password_with_excel_data(String rows)
    {
        datamap=DataReader.data(System.getProperty("user.dir")+"\\testData\\Opencart_LoginData.xlsx", "Sheet1");

        int index=Integer.parseInt(rows)-1;
        
        String email= datamap.get(index).get("username");
        String pwd= datamap.get(index).get("password");
        String exp_res= datamap.get(index).get("res");

        lp=new LoginPage(driver);
        lp.setEmail(email);
        lp.setPassword(pwd);

        lp.clickLogin();
        try
        {
            boolean targetpage=macc.isMyAccountPageExists();

            if(exp_res.equals("Valid"))
            {
                if(targetpage==true)
                {
                    MyAccountPage myaccpage=new MyAccountPage(driver);
                    myaccpage.clickLogout();
                    Assert.assertTrue(true);
                }
                else
                {
                    Assert.assertTrue(false);
                }
            }

            if(exp_res.equals("Invalid"))
            {
                if(targetpage==true)
                {
                    macc.clickLogout();
                    Assert.assertTrue(false);
                }
                else
                {
                    Assert.assertTrue(true);
                }
            }


        }
        catch(Exception e)
        {

            Assert.assertTrue(false);
        }
        driver.close();
    }
	
	
		//   **************   Account Registration Methods    **************  //


}
